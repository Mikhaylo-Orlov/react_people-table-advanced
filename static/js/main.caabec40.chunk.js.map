{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/PersonLink.tsx","components/SortLink.tsx","components/PeopleTable.tsx","api.ts","utils/filterPeople.ts","components/Loader/Loader.tsx","pages/PeoplePage.tsx","components/Navbar.tsx","pages/HomePage.tsx","pages/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","PeopleFilters","setSearchParams","sex","get","query","centuries","getAll","className","classNames","type","placeholder","onChange","event","preparedSearch","target","trimStart","map","century","includes","filter","length","PersonLink","person","name","born","died","fatherName","motherName","slug","mother","father","userSlug","useParams","SortLink","sortField","sortBy","isReversed","isSelected","sort","order","PeopleTable","people","slice","toUpperCase","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","Loader","PeoplePage","useState","setPeople","hasError","setHasError","loading","setLoading","filteredPeople","useMemo","visiblePeople","lowerCaseQuery","toLowerCase","String","Math","ceil","person1","person2","localeCompare","reverse","getFilteredPeople","fetchPeopleFromServer","peopleFromServer","peopleWithParents","find","useEffect","noPeopleOnServer","getLinkClass","isActive","Navbar","role","HomePage","NotFoundPage","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.caabec40.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { ChangeEvent } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const sex = searchParams.get('sex') || '';\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const centuriesValues = ['16', '17', '18', '19', '20'];\n\n  const onQueryChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const preparedSearch = getSearchWith(\n      searchParams,\n      { query: event.target.value.trimStart() || null },\n    );\n\n    setSearchParams(preparedSearch);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({ 'is-active': !sex })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          className={classNames({ 'is-active': sex === 'm' })}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          className={classNames({ 'is-active': sex === 'f' })}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            value={query}\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={onQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesValues.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames(\n                  'button mr-1',\n                  { 'is-info': centuries.includes(century) },\n                )}\n                params={{\n                  centuries: centuries.includes(century)\n                    ? centuries.filter(value => value !== century)\n                    : [...centuries, century],\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames(\n                'button is-success',\n                { 'is-outlined': centuries.length > 0 },\n              )}\n              params={{\n                centuries: null,\n              }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            query: null,\n            sex: null,\n            centuries: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import classNames from 'classnames';\nimport { Link, useParams } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const {\n    name,\n    sex,\n    born,\n    died,\n    fatherName,\n    motherName,\n    slug,\n    mother,\n    father,\n  } = person;\n  const { userSlug } = useParams();\n\n  return (\n    <>\n      <tr\n        data-cy=\"person\"\n        className={classNames({\n          'has-background-warning': slug === userSlug,\n        })}\n      >\n        <td>\n          <Link\n            to={`/people/${slug}`}\n            className={classNames(\n              { 'has-text-danger': sex === 'f' },\n            )}\n          >\n            {name}\n          </Link>\n        </td>\n\n        <td>{sex}</td>\n        <td>{born}</td>\n        <td>{died}</td>\n        <td>\n          {mother ? (\n            <Link\n              to={`/people/${mother.slug}`}\n              className=\"has-text-danger\"\n            >\n              {motherName}\n            </Link>\n          ) : (motherName || '-')}\n        </td>\n        <td>\n          {father ? (\n            <Link\n              to={`/people/${father.slug}`}\n            >\n              {fatherName}\n            </Link>\n          ) : (fatherName || '-')}\n        </td>\n      </tr>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  sortField: string,\n};\n\nexport const SortLink: React.FC<Props> = ({ sortField }) => {\n  const [searchParams] = useSearchParams();\n  const sortBy = searchParams.get('sort') || '';\n  const isReversed = searchParams.get('order') === 'desc';\n  const isSelected = sortBy === sortField;\n\n  return (\n    <SearchLink params={{\n      sort: isSelected && isReversed\n        ? null\n        : sortField,\n\n      order: isSelected && !isReversed\n        ? 'desc'\n        : null,\n    }}\n    >\n\n      <span className=\"icon\">\n        <i className={classNames('fas', {\n          'fa-sort': !isSelected,\n          'fa-sort-up': isSelected && !isReversed,\n          'fa-sort-down': isSelected && isReversed,\n        })}\n        />\n      </span>\n    </SearchLink>\n  );\n};\n","import { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { SortLink } from './SortLink';\n\ntype Props = {\n  people: Person[]\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const sortByValues = ['name', 'sex', 'born', 'died'];\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {sortByValues.map(value => (\n            <th key={value}>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {`${value.slice(0, 1).toUpperCase()}${value.slice(1)}`}\n\n                <SortLink sortField={value} />\n              </span>\n            </th>\n          ))}\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonLink\n            key={person.slug}\n            person={person}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Person } from '../types';\n\nexport const getFilteredPeople = (\n  people: Person[],\n  sex: string,\n  query: string,\n  sortBy: string,\n  order: string,\n  centuries: string[],\n) => {\n  let visiblePeople = [...people];\n\n  if (query) {\n    visiblePeople = visiblePeople.filter(person => {\n      const lowerCaseQuery = query.toLowerCase();\n      const needSymbolsToCheck = (\n        person.name + person.fatherName + person.motherName).toLowerCase();\n\n      return needSymbolsToCheck.includes(lowerCaseQuery);\n    });\n  }\n\n  if (sex) {\n    visiblePeople = visiblePeople.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length > 0) {\n    visiblePeople = visiblePeople.filter(person => (\n      centuries.includes(String(Math.ceil(person.born / 100)))\n    ));\n  }\n\n  if (sortBy) {\n    visiblePeople.sort((person1, person2) => {\n      switch (sortBy) {\n        case 'name':\n        case 'sex':\n          return person1[sortBy].localeCompare(person2[sortBy]);\n\n        case 'born':\n        case 'died':\n          return person1[sortBy] - person2[sortBy];\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (order) {\n    visiblePeople.reverse();\n  }\n\n  return visiblePeople;\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { getFilteredPeople } from '../utils/filterPeople';\nimport { Loader } from '../components/Loader';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [hasError, setHasError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [searchParams] = useSearchParams();\n  const sex = searchParams.get('sex') || '';\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const order = searchParams.get('order') || '';\n  const sortBy = searchParams.get('sort') || '';\n\n  const filteredPeople = useMemo(() => (\n    getFilteredPeople(\n      people,\n      sex,\n      query,\n      sortBy,\n      order,\n      centuries,\n    )\n  ), [sex, query, centuries, sortBy, order]);\n\n  const fetchPeopleFromServer = async () => {\n    setHasError(false);\n    setLoading(true);\n\n    try {\n      const peopleFromServer = await getPeople();\n\n      const peopleWithParents = peopleFromServer.map(person => ({\n        ...person,\n        mother: peopleFromServer.find(\n          mother => mother.name === person.motherName,\n        ),\n        father: peopleFromServer.find(\n          father => father.name === person.fatherName,\n        ),\n      }));\n\n      setPeople(peopleWithParents);\n    } catch {\n      setHasError(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPeopleFromServer();\n  }, []);\n\n  const noPeopleOnServer = !people.length && !loading && !hasError;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n\n          {people.length > 0 && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {loading && (\n                <Loader />\n              )}\n\n              {hasError && (\n                <p data-cy=\"peopleLoadingError\">\n                  Something went wrong\n                </p>\n              )}\n\n              {noPeopleOnServer && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {(!filteredPeople.length && !loading) && (\n                <p>\n                  There are no people matching the current search criteria\n                </p>\n              )}\n\n              {people.length > 0 && (\n                <PeopleTable people={filteredPeople} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item',\n  { 'has-background-grey-lighter': isActive },\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import {\n  Navigate, Route, Routes,\n} from 'react-router-dom';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nimport { HomePage } from './pages/HomePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/people\">\n              <Route index element={<PeoplePage />} />\n              <Route path=\":userSlug\" element={<PeoplePage />} />\n            </Route>\n            <Route path=\"*\" element={<NotFoundPage />} />\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}